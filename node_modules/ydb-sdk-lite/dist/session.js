"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
/**
 * Session.
 */
const debug_1 = __importDefault(require("debug"));
const api_1 = require("./api");
const errors_1 = require("./api/errors");
const bundle_1 = require("../proto/bundle");
const data_query_1 = require("./query/data-query");
const debug = (0, debug_1.default)('ydb-sdk-lite:session');
const CreateSessionResult = bundle_1.Ydb.Table.CreateSessionResult;
class Session {
    constructor(grpc, tablePathPrefix) {
        this.grpc = grpc;
        this.tablePathPrefix = tablePathPrefix;
        this.busy = false;
    }
    async init() {
        const response = await this.grpc.tableService.createSession({});
        const payload = (0, api_1.getOperationPayload)(response);
        this.sessionId = CreateSessionResult.decode(payload).sessionId;
        debug(`Session created: ${this.sessionId}`);
    }
    async executeQuery(...args) {
        try {
            return await this.executeQueryUnsafe(...args);
        }
        catch (e) {
            if (e instanceof errors_1.BadSession) {
                // if session is bad - retry once with new session
                await this.init();
                return this.executeQueryUnsafe(...args);
            }
            else if (e instanceof errors_1.Unavailable) {
                // if unavailable - retry once the same request
                // see: https://cloud.yandex.ru/docs/ydb/ydb-sdk/error_handling#termination-statuses
                // todo: better retry policy
                return this.executeQueryUnsafe(...args);
            }
            else {
                throw e;
            }
        }
    }
    setBusy(value) {
        this.busy = value;
        debug(`Session ${value ? 'taken' : 'free'}: ${this.sessionId}`);
    }
    isBusy() {
        return this.busy;
    }
    async destroy() {
        try {
            const response = await this.grpc.tableService.deleteSession({ sessionId: this.sessionId });
            errors_1.YdbError.checkStatus(response.operation);
            debug(`Session destroyed: ${this.sessionId}`);
        }
        catch (e) {
            debug(e);
        }
    }
    // Keep this method protected, not private because ts does not emit parameters for private methods,
    // but we use it in executeQuery() declaration.
    async executeQueryUnsafe(...args) {
        return new data_query_1.DataQuery(this.grpc, this.tablePathPrefix, this.sessionId).execute(...args);
    }
}
exports.Session = Session;
//# sourceMappingURL=session.js.map