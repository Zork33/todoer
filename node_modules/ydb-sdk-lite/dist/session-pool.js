"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionPool = void 0;
const session_1 = require("./session");
class SessionPool {
    constructor(grpc, tablePathPrefix) {
        this.grpc = grpc;
        this.tablePathPrefix = tablePathPrefix;
        this.sessions = [];
    }
    /**
     * Run function with session, allowing to execute prepared queries.
     */
    async withSession(fn) {
        const session = this.sessions.find(session => !session.isBusy()) || (await this.createSession());
        // It is important to call session.setBusy sinchronously. Otherwise same sesison can be taken.
        session.setBusy(true);
        // todo: handle busy session
        // todo: handle bad session
        // todo: handle expired session
        try {
            return await fn(session);
        }
        finally {
            session.setBusy(false);
        }
    }
    async destroy() {
        await Promise.all(this.sessions.map(session => this.destroySession(session)));
    }
    async createSession() {
        const session = new session_1.Session(this.grpc, this.tablePathPrefix);
        await session.init();
        this.sessions.push(session);
        return session;
    }
    async destroySession(session) {
        this.sessions = this.sessions.filter(s => s !== session);
        await session.destroy();
    }
}
exports.SessionPool = SessionPool;
//# sourceMappingURL=session-pool.js.map