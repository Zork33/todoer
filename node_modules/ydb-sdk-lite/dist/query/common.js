"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTypedParams = exports.convertResultToJs = exports.getQueryPayload = exports.addTablePathPrefix = void 0;
const bundle_1 = require("../../proto/bundle");
const api_1 = require("../api");
const ydb_to_js_1 = require("../types/ydb-to-js");
const js_to_ydb_1 = require("../types/js-to-ydb");
const infer_1 = require("../types/infer");
const utils_1 = require("../utils");
const MAX_STRING_OUTPUT = 300;
function addTablePathPrefix(query, tablePathPrefix) {
    return tablePathPrefix
        ? `PRAGMA TablePathPrefix = "${tablePathPrefix}";\n${query}`
        : query;
}
exports.addTablePathPrefix = addTablePathPrefix;
function getQueryPayload(response, query, params = {}) {
    try {
        return (0, api_1.getOperationPayload)(response);
    }
    catch (e) {
        const queryMsg = `\nQuery: ${truncate(query, MAX_STRING_OUTPUT)}`;
        const paramsMsg = `\nParams: ${stringifyQueryParams(params)}`;
        (0, utils_1.appendMessageToError)(e, `${queryMsg}${paramsMsg}`);
        throw e;
    }
}
exports.getQueryPayload = getQueryPayload;
function stringifyQueryParams(params) {
    return JSON.stringify(params, (_, value) => {
        return typeof value === 'string'
            ? truncate(value, MAX_STRING_OUTPUT)
            : value;
    });
}
function convertResultToJs({ resultSets }) {
    return (resultSets || []).map(resultSet => (0, ydb_to_js_1.resultSetToJs)(resultSet));
}
exports.convertResultToJs = convertResultToJs;
function buildTypedParams(query, params) {
    const typedParams = {};
    const keys = Object.keys(params);
    if (keys.length === 0)
        return typedParams;
    const types = (0, infer_1.inferParamTypesByQuery)(query);
    keys.forEach(key => {
        const value = params[key];
        key = key.startsWith('$') ? key : `$${key}`;
        typedParams[key] = value instanceof bundle_1.Ydb.TypedValue
            ? value
            : buildTypedParam(value, types, key);
    });
    return typedParams;
}
exports.buildTypedParams = buildTypedParams;
function buildTypedParam(value, types, key) {
    const type = types[key];
    if (!type) {
        throw new Error(`Can not infer type for parameter: ${key}`);
    }
    const { typeId, nullable } = type;
    return (0, js_to_ydb_1.buildTypedValue)(value, typeId, { nullable });
}
function truncate(str, maxLength) {
    return str.length > maxLength ? `${str.substr(0, maxLength)}...` : str;
}
//# sourceMappingURL=common.js.map