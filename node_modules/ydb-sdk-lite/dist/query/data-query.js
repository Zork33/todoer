"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataQuery = exports.AUTO_TX_RO = exports.AUTO_TX_RW = void 0;
/**
 * Execute data query via table service.
 */
const debug_1 = __importDefault(require("debug"));
const bundle_1 = require("../../proto/bundle");
const common_1 = require("./common");
const debug = (0, debug_1.default)('ydb-sdk-lite:query');
const ExecuteQueryResult = bundle_1.Ydb.Table.ExecuteQueryResult;
exports.AUTO_TX_RW = {
    beginTx: {
        serializableReadWrite: {}
    },
    commitTx: true
};
exports.AUTO_TX_RO = {
    beginTx: {
        onlineReadOnly: {
            allowInconsistentReads: false
        }
    },
    commitTx: true
};
class DataQuery {
    constructor(grpc, tablePathPrefix, sessionId) {
        this.grpc = grpc;
        this.tablePathPrefix = tablePathPrefix;
        this.sessionId = sessionId;
    }
    async execute(inputQuery, parameters = {}, txControl = exports.AUTO_TX_RW, operationParams, queryCachePolicy) {
        const query = this.buildQuery(inputQuery);
        const request = {
            sessionId: this.sessionId,
            query,
            parameters: this.buildParameters(inputQuery, parameters),
            txControl,
            operationParams,
            queryCachePolicy,
        };
        const queryText = query.yqlText || `id: ${query.id}`;
        debug(`Executing data query: ${queryText}`);
        const response = await this.grpc.tableService.executeDataQuery(request);
        const payload = (0, common_1.getQueryPayload)(response, queryText, parameters);
        const result = ExecuteQueryResult.decode(payload);
        return (0, common_1.convertResultToJs)(result);
    }
    buildQuery(inputQuery) {
        return typeof inputQuery === 'string'
            ? { yqlText: (0, common_1.addTablePathPrefix)(inputQuery, this.tablePathPrefix) }
            : { id: inputQuery.queryId };
    }
    buildParameters(inputQuery, parameters) {
        return typeof inputQuery === 'string'
            ? (0, common_1.buildTypedParams)(inputQuery, parameters)
            : parameters;
    }
}
exports.DataQuery = DataQuery;
//# sourceMappingURL=data-query.js.map