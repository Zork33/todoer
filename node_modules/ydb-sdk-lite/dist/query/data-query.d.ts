import { Grpc } from '../api';
import { Ydb } from '../../proto/bundle';
import { IQueryParams } from './common';
declare type IPrepareQueryResult = Ydb.Table.IPrepareQueryResult;
declare type ITransactionControl = Ydb.Table.ITransactionControl;
declare type IOperationParams = Ydb.Operations.IOperationParams;
declare type IQueryCachePolicy = Ydb.Table.IQueryCachePolicy;
export declare const AUTO_TX_RW: ITransactionControl;
export declare const AUTO_TX_RO: ITransactionControl;
export declare class DataQuery {
    private grpc;
    private tablePathPrefix;
    private sessionId;
    constructor(grpc: Grpc, tablePathPrefix: string, sessionId: string);
    execute(inputQuery: IPrepareQueryResult | string, parameters?: IQueryParams, txControl?: ITransactionControl, operationParams?: IOperationParams, queryCachePolicy?: IQueryCachePolicy): Promise<Record<string, unknown>[][]>;
    private buildQuery;
    private buildParameters;
}
export {};
//# sourceMappingURL=data-query.d.ts.map