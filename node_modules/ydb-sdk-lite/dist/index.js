"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ydb = void 0;
/**
 * Ydb.
 */
const api_1 = require("./api");
const session_pool_1 = require("./session-pool");
const data_query_1 = require("./query/data-query");
const yql_query_1 = require("./query/yql-query");
const js_to_ydb_1 = require("./types/js-to-ydb");
const bundle_1 = require("../proto/bundle");
class Ydb {
    constructor(options) {
        this.options = options;
        const { endpoint, dbName, iamToken, tablePathPrefix } = this.options;
        this.grpc = new api_1.Grpc({ endpoint, dbName, iamToken });
        this.tablePathPrefix = this.buildTablePathPrefix(tablePathPrefix);
        this.sessionPool = new session_pool_1.SessionPool(this.grpc, this.tablePathPrefix);
    }
    get endpoint() {
        return this.grpc.endpoint;
    }
    get dbName() {
        return this.grpc.dbName;
    }
    get iamToken() {
        return this.grpc.iamToken;
    }
    /**
     * Execute yql query via scripting service.
     * Difference from session.executeQuery:
     * - query can contain DDL instructions (CREATE TABLE, ALTER TABLE, etc)
     * - query can not be prepared and cached on server
     */
    async executeYql(...args) {
        return new yql_query_1.YqlQuery(this.grpc, this.tablePathPrefix).execute(...args);
    }
    /**
     * Execute data query via table service.
     * Shortcut for `ydb.withSession(session => session.executeQuery(...))`.
     */
    async executeDataQuery(query, ...args) {
        return this.withSession(session => session.executeQuery(query, ...args));
    }
    /**
     * Run function with session, allowing to execute prepared queries.
     * todo: is it possible to infer parameters from SessionPool.prototype.withSession?
     */
    async withSession(fn) {
        return this.sessionPool.withSession(fn);
    }
    async destroy() {
        await this.sessionPool.destroy();
    }
    buildTablePathPrefix(tablePathPrefix) {
        return tablePathPrefix ? `${this.dbName}/${tablePathPrefix}` : '';
    }
}
exports.Ydb = Ydb;
Ydb.AUTO_TX_RW = data_query_1.AUTO_TX_RW;
Ydb.AUTO_TX_RO = data_query_1.AUTO_TX_RO;
Ydb.typedValue = js_to_ydb_1.buildTypedValue;
Ydb.PrimitiveTypeId = bundle_1.Ydb.Type.PrimitiveTypeId;
//# sourceMappingURL=index.js.map