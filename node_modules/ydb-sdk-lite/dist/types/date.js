"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertFromDateObjectIfNeeded = exports.convertToDateObjectIfNeeded = exports.dateTypeToProp = void 0;
/**
 * Date types convertion helpers.
 */
/* eslint-disable complexity */
const bundle_1 = require("../../proto/bundle");
// todo: support INTERVAL
const { DATE, DATETIME, TIMESTAMP, TZ_DATE, TZ_DATETIME, TZ_TIMESTAMP, } = bundle_1.Ydb.Type.PrimitiveTypeId;
exports.dateTypeToProp = {
    [DATE]: 'uint32Value',
    [DATETIME]: 'uint32Value',
    [TIMESTAMP]: 'uint64Value',
    [TZ_DATE]: 'textValue',
    [TZ_DATETIME]: 'textValue',
    [TZ_TIMESTAMP]: 'textValue',
};
function convertToDateObjectIfNeeded(typeId, value) {
    switch (typeId) {
        case DATE: return new Date(value * 3600 * 1000 * 24);
        case DATETIME: return new Date(value * 1000);
        case TIMESTAMP: return new Date(Number(value / 1000n));
        case TZ_DATE: return new Date(value);
        case TZ_DATETIME: return new Date(value);
        case TZ_TIMESTAMP: return new Date(value);
        default: return value;
    }
}
exports.convertToDateObjectIfNeeded = convertToDateObjectIfNeeded;
function convertFromDateObjectIfNeeded(typeId, value) {
    switch (typeId) {
        case DATE: return value.valueOf() / 3600 / 1000 / 24;
        case DATETIME: return value.valueOf() / 1000;
        case TIMESTAMP: return BigInt(value.valueOf() * 1000);
        case TZ_DATE: return value.toDateString();
        case TZ_DATETIME: return value.toISOString();
        case TZ_TIMESTAMP: return value.toISOString();
        default: return value;
    }
}
exports.convertFromDateObjectIfNeeded = convertFromDateObjectIfNeeded;
//# sourceMappingURL=date.js.map