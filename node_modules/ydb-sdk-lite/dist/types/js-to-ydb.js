"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildTypedValue = void 0;
/**
 * Convertion from js types to ydb.
 */
const bundle_1 = require("../../proto/bundle");
const date_1 = require("./date");
const bigint_1 = require("./bigint");
const json_1 = require("./json");
const NullValue = bundle_1.google.protobuf.NullValue;
const PrimitiveTypeId = bundle_1.Ydb.Type.PrimitiveTypeId;
// todo: support DECIMAL
const typeToProp = {
    [PrimitiveTypeId.BOOL]: 'boolValue',
    [PrimitiveTypeId.INT8]: 'int32Value',
    [PrimitiveTypeId.UINT8]: 'uint32Value',
    [PrimitiveTypeId.INT16]: 'int32Value',
    [PrimitiveTypeId.UINT16]: 'uint32Value',
    [PrimitiveTypeId.INT32]: 'int32Value',
    [PrimitiveTypeId.UINT32]: 'uint32Value',
    [PrimitiveTypeId.INT64]: 'int64Value',
    [PrimitiveTypeId.UINT64]: 'uint64Value',
    [PrimitiveTypeId.FLOAT]: 'floatValue',
    [PrimitiveTypeId.DOUBLE]: 'doubleValue',
    [PrimitiveTypeId.STRING]: 'bytesValue',
    [PrimitiveTypeId.UTF8]: 'textValue',
    [PrimitiveTypeId.JSON]: 'textValue',
    [PrimitiveTypeId.JSON_DOCUMENT]: 'textValue',
    [PrimitiveTypeId.UUID]: 'textValue',
    ...date_1.dateTypeToProp,
};
const YDB_NULL_VALUE = { nullFlagValue: NullValue.NULL_VALUE };
function buildTypedValue(value, typeId, { nullable = true } = {}) {
    return {
        type: buildType(typeId, nullable),
        value: buildValue(value, typeId)
    };
}
exports.buildTypedValue = buildTypedValue;
function buildType(typeId, nullable) {
    return nullable
        ? { optionalType: { item: { typeId } } }
        : { typeId };
}
function buildValue(value, typeId) {
    if (value === null || value === undefined) {
        return YDB_NULL_VALUE;
    }
    const propName = typeToProp[typeId];
    if (propName === undefined) {
        throw new Error(`Unsupported type id: ${typeId}, value: ${value}`);
    }
    value = (0, json_1.stringifyJsonIfNeeded)(typeId, value);
    value = (0, date_1.convertFromDateObjectIfNeeded)(typeId, value);
    value = transformValueByPropName(propName, value);
    return { [propName]: value };
}
function transformValueByPropName(propName, value) {
    switch (propName) {
        case 'bytesValue': return Buffer.from(value);
        case 'int64Value': return (0, bigint_1.bigIntToLong)(value);
        case 'uint64Value': return (0, bigint_1.bigIntToLong)(value);
        default: return value;
    }
}
//# sourceMappingURL=js-to-ydb.js.map