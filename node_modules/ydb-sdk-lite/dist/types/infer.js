"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inferParamTypesByQuery = void 0;
/**
 * Infer parameters types by query text.
 */
const bundle_1 = require("../../proto/bundle");
// see: https://www.typescriptlang.org/docs/handbook/namespaces.html#aliases
var PrimitiveTypeId = bundle_1.Ydb.Type.PrimitiveTypeId;
// see: https://cloud.yandex.ru/docs/ydb/concepts/datatypes
// see: https://cloud.yandex.ru/docs/ydb/yql/reference/types/primitive
const typeNameToId = {
    BOOL: PrimitiveTypeId.BOOL,
    INT8: PrimitiveTypeId.INT8,
    UINT8: PrimitiveTypeId.UINT8,
    INT16: PrimitiveTypeId.INT16,
    UINT16: PrimitiveTypeId.UINT16,
    INT32: PrimitiveTypeId.INT32,
    UINT32: PrimitiveTypeId.UINT32,
    INT64: PrimitiveTypeId.INT64,
    UINT64: PrimitiveTypeId.UINT64,
    FLOAT: PrimitiveTypeId.FLOAT,
    DOUBLE: PrimitiveTypeId.DOUBLE,
    STRING: PrimitiveTypeId.STRING,
    UTF8: PrimitiveTypeId.UTF8,
    JSONDOCUMENT: PrimitiveTypeId.JSON_DOCUMENT,
    JSON: PrimitiveTypeId.JSON,
    UUID: PrimitiveTypeId.UUID,
    DATE: PrimitiveTypeId.DATE,
    DATETIME: PrimitiveTypeId.DATETIME,
    TIMESTAMP: PrimitiveTypeId.TIMESTAMP,
    TZDATE: PrimitiveTypeId.TZ_DATE,
    TZDATETIME: PrimitiveTypeId.TZ_DATETIME,
    TZTIMESTAMP: PrimitiveTypeId.TZ_TIMESTAMP,
};
const PARAM_REGEXP = /declare\s+(?<name>\$[a-z0-9_]+)\s+as\s+(?<typeName>[a-z0-9]+)(?<nullable>\??)/ig;
function inferParamTypesByQuery(query) {
    const result = {};
    const matches = [...query.matchAll(PARAM_REGEXP)];
    matches.forEach(({ groups }) => {
        let { name, typeName, nullable } = groups || {}; // eslint-disable-line prefer-const
        typeName = typeName.toUpperCase();
        const typeId = typeNameToId[typeName];
        result[name] = { typeName, typeId, nullable: nullable === '?' };
    });
    return result;
}
exports.inferParamTypesByQuery = inferParamTypesByQuery;
//# sourceMappingURL=infer.js.map