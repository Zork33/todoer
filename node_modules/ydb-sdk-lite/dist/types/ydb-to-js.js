"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resultSetToJs = void 0;
const date_1 = require("./date");
const bigint_1 = require("./bigint");
function resultSetToJs(resultSet) {
    const rows = resultSet.rows || [];
    const columns = resultSet.columns || [];
    // console.dir(resultSet, { depth: null })
    return rows.map(row => rowToJs(row, columns));
}
exports.resultSetToJs = resultSetToJs;
function rowToJs(row, columns) {
    const items = row.items || [];
    const result = {};
    items.forEach((ydbValue, index) => {
        const column = columns[index];
        result[column.name] = valueToJs(ydbValue, column);
    });
    return result;
}
function valueToJs(ydbValue, column) {
    const value = extractValue(ydbValue);
    if (value === null) {
        return null;
    }
    const typeId = getColumnTypeId(column);
    return (0, date_1.convertToDateObjectIfNeeded)(typeId, value);
}
function getColumnTypeId(column) {
    const { type } = column;
    const typeId = (type?.optionalType?.item?.typeId || type?.typeId) ?? null;
    if (typeId === null) {
        throw new Error(`Got empty typeId for column ${JSON.stringify(column)}.`);
    }
    return typeId;
}
function extractValue(ydbValue) {
    const nonPrimitiveProps = ['items', 'pairs', 'nestedValue'];
    const propName = Object.keys(ydbValue).find(key => !nonPrimitiveProps.includes(key));
    if (!propName) {
        throw new Error(`Expected a primitive value, got ${ydbValue}!`);
    }
    const value = ydbValue[propName];
    return transformValueByPropName(propName, value);
}
function transformValueByPropName(propName, value) {
    switch (propName) {
        case 'bytesValue': return Buffer.from(value, 'base64').toString();
        case 'int64Value': return (0, bigint_1.longToBigInt)(value);
        case 'uint64Value': return (0, bigint_1.longToBigInt)(value);
        case 'nullFlagValue': return null;
        default: return value;
    }
}
//# sourceMappingURL=ydb-to-js.js.map