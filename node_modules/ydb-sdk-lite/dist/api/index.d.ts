import * as grpc from '@grpc/grpc-js';
import { Ydb } from '../../proto/bundle';
import { GrpcResponse, getOperationPayload } from './payload';
export { GrpcResponse, getOperationPayload };
declare const TableService: typeof Ydb.Table.V1.TableService;
declare const ScriptingService: typeof Ydb.Scripting.V1.ScriptingService;
declare const DiscoveryService: typeof Ydb.Discovery.V1.DiscoveryService;
declare type ServiceConstructor = typeof TableService | typeof ScriptingService | typeof DiscoveryService;
export interface GrpcOptions {
    endpoint?: string;
    dbName: string;
    iamToken: string;
}
export declare class Grpc {
    readonly endpoint: string;
    readonly dbName: string;
    readonly iamToken: string;
    readonly tableService: InstanceType<typeof TableService>;
    readonly scriptingService: InstanceType<typeof ScriptingService>;
    readonly discoveryService: InstanceType<typeof DiscoveryService>;
    /**
     * Основной клиент: ходит через ydb.serverless.yandexcloud.net
     * Через него работаем по дефолту и делаем discovery
     */
    protected client: grpc.Client;
    protected metadata: grpc.Metadata;
    constructor({ endpoint, dbName, iamToken }: GrpcOptions);
    protected createMetadata(): grpc.Metadata;
    protected createService<T extends ServiceConstructor>(serviceName: string, ctor: T): InstanceType<T>;
    /**
     * Сейчас дискавери возвращает 3 ендпойнта со списком доступных сервисов:
     * - ru-central1-a.ydb.serverless.yandexcloud.net
     * - ru-central1-b.ydb.serverless.yandexcloud.net
     * - ru-central1-c.ydb.serverless.yandexcloud.net
     * В основном sdk они ротируются, и если какой-то отвечает ошибкой, то он пессимизируется.
     * Тут дискавери пока отключил, т.к. это лишние 100мс, а профит для функций не очень ясен.
     * Кейс когда это полезно - если упадет именно ydb.serverless.yandexcloud.net,
     * который сейчас сам роутит на один из этих серверов.
     *
     * Еще вариант - запускать дисквери параллельно с основным запросом.
     * Тогда в случае ошибки запроса мы уже будем иметь список серверов.
     *
     * Вобщем, наблюдаем. Это метод пока нигде не используется.
     */
    discoverEndpoints(): Promise<Ydb.Discovery.ListEndpointsResult>;
}
//# sourceMappingURL=index.d.ts.map