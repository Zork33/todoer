/**
 * Ydb.
 */
import { Grpc, GrpcOptions } from './api';
import { SessionPool } from './session-pool';
import { Session } from './session';
import { YqlQuery } from './query/yql-query';
import { buildTypedValue } from './types/js-to-ydb';
import { Ydb as ProtoYdb } from '../proto/bundle';
import { DropFirst } from './utils';
export declare type YdbOptions = GrpcOptions & {
    tablePathPrefix?: string;
};
export declare class Ydb {
    options: YdbOptions;
    static AUTO_TX_RW: ProtoYdb.Table.ITransactionControl;
    static AUTO_TX_RO: ProtoYdb.Table.ITransactionControl;
    static typedValue: typeof buildTypedValue;
    static PrimitiveTypeId: typeof ProtoYdb.Type.PrimitiveTypeId;
    protected grpc: Grpc;
    protected tablePathPrefix: string;
    protected sessionPool: SessionPool;
    constructor(options: YdbOptions);
    get endpoint(): string;
    get dbName(): string;
    get iamToken(): string;
    /**
     * Execute yql query via scripting service.
     * Difference from session.executeQuery:
     * - query can contain DDL instructions (CREATE TABLE, ALTER TABLE, etc)
     * - query can not be prepared and cached on server
     */
    executeYql(...args: Parameters<typeof YqlQuery.prototype.execute>): Promise<Record<string, unknown>[][]>;
    /**
     * Execute data query via table service.
     * Shortcut for `ydb.withSession(session => session.executeQuery(...))`.
     */
    executeDataQuery(query: string, ...args: DropFirst<Parameters<typeof Session.prototype.executeQuery>>): Promise<Record<string, unknown>[][]>;
    /**
     * Run function with session, allowing to execute prepared queries.
     * todo: is it possible to infer parameters from SessionPool.prototype.withSession?
     */
    withSession<T>(fn: (session: Session) => T): Promise<T>;
    destroy(): Promise<void>;
    protected buildTablePathPrefix(tablePathPrefix?: string): string;
}
//# sourceMappingURL=index.d.ts.map